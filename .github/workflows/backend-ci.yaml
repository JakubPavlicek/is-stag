name: Backend CI

on:
  push:
    paths:
      - 'services/**'
      - 'proto/**'
      - 'config/**'
      - '.github/workflows/backend-ci.yaml'

jobs:
  protolint-lint-proto:
    name: Protolint Lint Proto
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Set up protolint
        run: |
          PROTOLINT_VERSION="0.56.4"
          PB_REL="https://github.com/yoheimuta/protolint/releases/download/v${PROTOLINT_VERSION}/protolint_${PROTOLINT_VERSION}_linux_amd64.tar.gz"
          curl -sSL "${PB_REL}" | tar -xz
          sudo mv protolint /usr/local/bin/
          protolint --version

      - name: Run protolint
        run: protolint lint proto

  vacuum-lint-openapi:
    name: Vacuum Lint OpenAPI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Install Vacuum
        run: |
          curl -fsSL https://quobix.com/scripts/install_vacuum.sh | sh
          vacuum version

      - name: Run Vacuum Lint
        working-directory: services
        run: vacuum lint */src/main/resources/static/openapi.yaml --fail-severity error --min-score 95

  sonar-lint-code:
    name: SonarQube Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Setup JDK 25
        uses: actions/setup-java@v5.0.0
        with:
          distribution: liberica
          java-version: 25
          cache: maven

      - name: Cache SonarQube packages
        uses: actions/cache@v4.2.4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build and analyze
        working-directory: services
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B -DskipTests verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=JakubPavlicek_is-stag

  discover-services:
    name: Discover Services
    runs-on: ubuntu-latest
    outputs:
      # This output will be a JSON array like ["service-a", "service-b"]
      services: ${{ steps.list-services.outputs.services }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: List service directories
        id: list-services
        run: |
          # Finds all subdirectories in /services that contain a pom.xml
          SERVICES=$(find ./services -mindepth 1 -maxdepth 1 -type d -exec test -e "{}/pom.xml" \; -print | sed 's|^\./services/||' | jq -R . | jq -s -c .)
          echo "services=$SERVICES" >> $GITHUB_OUTPUT
          echo "Found services: $SERVICES"

  build-and-publish-services:
    name: Build and Publish Service Docker Images
    runs-on: ubuntu-24.04-arm
    needs:
      - discover-services
#      - protolint-lint-proto
#      - vacuum-lint-openapi
#      - sonar-lint-code
    defaults:
      run:
        working-directory: services
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Docker Login
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup JDK 25
        uses: actions/setup-java@v5.0.0
        with:
          distribution: liberica
          java-version: 25
          cache: maven

      - name: Warm Up Dependencies
        run: mvn -B -T 1C -DskipTests package

      - name: Build and Push Spring Boot Docker Images
        run: |
          mvn -B -T 1C -DskipTests spring-boot:build-image \
            -Dspring-boot.build-image.publish=true \
            -Ddocker.username=${{ secrets.DOCKERHUB_USERNAME }} \
            -Ddocker.password=${{ secrets.DOCKERHUB_TOKEN }}

  create-manifest:
    needs: build-and-publish-services
    runs-on: ubuntu-latest

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Docker Login
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and Push Manifests
        # Loop through each service discovered in the first job
        run: |
          services='${{ needs.discover-services.outputs.services }}'
          for service in $(echo "$services" | jq -r '.[]'); do
            echo "Creating manifest for $service"
          
            FINAL_TAG=${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/$service:${{ env.IMAGE_TAG }}
            AMD64_TAG=${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/$service:${{ env.IMAGE_TAG }}-amd64
            ARM64_TAG=${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/$service:${{ env.IMAGE_TAG }}-arm64
          
            docker buildx imagetools create \
              -t $FINAL_TAG \
              $AMD64_TAG \
              $ARM64_TAG
          
            echo "Successfully created manifest $FINAL_TAG"
          done
