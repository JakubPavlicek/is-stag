services:
  keycloak:
    build: ./keycloak
    container_name: keycloak
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: true
    healthcheck:
      test: [
        "CMD-SHELL",
        "exec 3<>/dev/tcp/localhost/8080; \
        echo -en 'GET /health/ready' >&3; \
        # Give the server a moment to respond, then search for 'UP'
        if timeout 3 cat <&3 | grep -m 1 'UP'; then \
          exec 3<&-; exec 3>&-; exit 0; \
        else \
          exec 3<&-; exec 3>&-; exit 1; \
        fi"
      ]
      start_period: 30s
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8180:8080"
    command: start-dev --import-realm
    volumes:
      - ./keycloak/is-stag-realm-export.json:/opt/keycloak/data/import/is-stag-realm.json
    networks:
      - is-stag-network

  react-client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: react-client
    environment:
      VITE_KEYCLOAK_URL: http://localhost:8180/
    ports:
      - "5173:5173"
    depends_on:
      keycloak:
        condition: service_healthy
    networks:
      - is-stag-network

  config-server:
    image: config-server:0.0.1
    pull_policy: never
    container_name: config-server
    environment:
      THC_PATH: /actuator/health
      THC_PORT: 8888
    healthcheck:
      test: ["CMD", "/workspace/health-check"]
      start_period: 10s
      timeout: 20s
      retries: 5
    ports:
      - "8888:8888"
    networks:
      - is-stag-network

  discovery-server:
    image: discovery-server:0.0.1
    pull_policy: never
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      THC_PATH: /actuator/health
      THC_PORT: 8761
    healthcheck:
      test: [ "CMD", "/workspace/health-check" ]
      start_period: 10s
      timeout: 20s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - is-stag-network

  api-gateway:
    image: api-gateway:0.0.1
    pull_policy: never
    container_name: api-gateway
    ports:
      - "8100:8100"
    environment:
      THC_PATH: /actuator/health
      THC_PORT: 8100
    healthcheck:
      test: [ "CMD", "/workspace/health-check" ]
      start_period: 30s
      timeout: 10s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - is-stag-network

  student-service:
    image: student-service:0.0.1
    pull_policy: never
    container_name: student-service
    ports:
      - "8030:8030"
      - "9030:9030"
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - is-stag-network

  subject-service:
    image: subject-service:0.0.1
    pull_policy: never
    container_name: subject-service
    ports:
      - "8040:8040"
#      - "9040:9040"
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - is-stag-network

  user-service:
    image: user-service:0.0.1
    pull_policy: never
    container_name: user-service
    ports:
      - "8020:8020"
      - "9020:9020"
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - is-stag-network

  codelist-service:
    image: codelist-service:0.0.1
    pull_policy: never
    container_name: codelist-service
    ports:
      - "8010:8010"
      - "9010:9010"
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - is-stag-network

  # --- Observability ---

  otel:
    container_name: otel
    image: otel/opentelemetry-collector-contrib:latest
    command: [ --config=/etc/otel-config.yml ]
    volumes:
      - ./otelcol-config.yaml:/etc/otel-config.yml
    ports:
      - "4318:4318"
      - "4317:4317"
      - "55679:55679"
    networks:
      - is-stag-network
  loki:
    container_name: loki
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
      - /Users/kuba/Downloads/data:/data
    ports:
      - "3100"
    networks:
      - is-stag-network
  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - ./grafana-datasources.yaml:/etc/grafana/provisioning/datasources/default.yml
      - ./grafana-datasources.yaml:/etc/grafana/provisioning/dashboards/default.yml
    ports:
      - "3000:3000"
    networks:
      - is-stag-network
  tempo:
    container_name: tempo
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo-config.yaml:/etc/tempo.yaml
      - /Users/kuba/Downloads/data:/data
    ports:
      - "4317"  # otlp grpc
      - "4318"
    networks:
      - is-stag-network
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    command: [
      --config.file=/etc/prometheus/prometheus.yml,
      --web.enable-otlp-receiver,
      --web.enable-remote-write-receiver
    ]
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9091:9090"
    networks:
      - is-stag-network

networks:
  is-stag-network:
    driver: bridge