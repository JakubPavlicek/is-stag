services:
  keycloak:
    profiles:
      - dev
      - prod
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.3.3
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: true

      # OpenTelemetry Tracing
      KC_TRACING_ENABLED: true
      KC_TRACING_ENDPOINT: http://otel:4317
      KC_TRACING_PROTOCOL: grpc
      KC_TRACING_COMPRESSION: gzip
      KC_TRACING_SERVICE_NAME: keycloak
      KC_TRACING_RESOURCE_ATTRIBUTES: service.name=keycloak,service.version=latest,environment=dev
      KC_TRACING_SAMPLER_TYPE: parentbased_traceidratio
      KC_TRACING_SAMPLER_RATIO: 1.0
    healthcheck:
      test: [
        "CMD-SHELL",
        "exec 3<>/dev/tcp/localhost/8080; \
        echo -en 'GET /health/ready' >&3; \
        # Give the server a moment to respond, then search for 'UP'
        if timeout 3 cat <&3 | grep -m 1 'UP'; then \
          exec 3<&-; exec 3>&-; exit 0; \
        else \
          exec 3<&-; exec 3>&-; exit 1; \
        fi"
      ]
      start_period: 30s
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      otel:
        condition: service_started
    ports:
      - "8180:8080"
    command: start-dev --import-realm
    volumes:
      - ./keycloak/is-stag-realm-export.json:/opt/keycloak/data/import/is-stag-realm.json
      - ./keycloak/providers/is-stag-authenticator/target/is-stag-authenticator.jar:/opt/keycloak/providers/is-stag-authenticator.jar
      - ./keycloak/theme/is-stag-theme:/opt/keycloak/themes/is-stag-theme
    networks:
      - is-stag-network

  redis:
    profiles:
      - dev
      - prod
    container_name: redis
    image: redis:8.2.1-alpine
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "6379:6379"
    networks:
      - is-stag-network

  react-client:
    profiles:
      - prod
    container_name: react-client
    image: react-client:0.0.1
    pull_policy: never
    environment:
      PORT: 5173
      VITE_KEYCLOAK_URL: http://localhost:8180/
    ports:
      - "5173:5173"
    depends_on:
      keycloak:
        condition: service_healthy
      api-gateway:
        condition: service_started
    networks:
      - is-stag-network

  config-server:
    profiles:
      - prod
    container_name: config-server
    image: jakubpavlicek/config-server:0.0.1
    pull_policy: never
    environment:
      THC_PATH: /actuator/health
      THC_PORT: 8888
      JAVA_TOOL_OPTIONS: "-javaagent:/otel/opentelemetry-javaagent.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_TRACES_SAMPLER_ARG: 1.0
      OTEL_EXPORTER_OTLP_COMPRESSION: gzip
      OTEL_SERVICE_NAME: config-server
      OTEL_METRICS_EXPORTER: otlp
      OTEL_TRACES_SAMPLER: parentbased_traceidratio
    volumes:
      - ./otel/opentelemetry-javaagent.jar:/otel/opentelemetry-javaagent.jar
    healthcheck:
      test: ["CMD", "/workspace/health-check"]
      start_period: 10s
      timeout: 20s
      retries: 5
    ports:
      - "8888:8888"
    networks:
      - is-stag-network

  discovery-server:
    profiles:
      - prod
    container_name: discovery-server
    image: jakubpavlicek/discovery-server:0.0.1
    pull_policy: never
    ports:
      - "8761:8761"
    environment:
      THC_PATH: /actuator/health
      THC_PORT: 8761
      JAVA_TOOL_OPTIONS: "-javaagent:/otel/opentelemetry-javaagent.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_EXPORTER_OTLP_COMPRESSION: gzip
      OTEL_SERVICE_NAME: discovery-server
      OTEL_METRICS_EXPORTER: otlp
      OTEL_TRACES_SAMPLER: parentbased_traceidratio
      OTEL_TRACES_SAMPLER_ARG: 1.0
    volumes:
      - ./otel/opentelemetry-javaagent.jar:/otel/opentelemetry-javaagent.jar
    healthcheck:
      test: [ "CMD", "/workspace/health-check" ]
      start_period: 10s
      timeout: 20s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - is-stag-network

  api-gateway:
    profiles:
      - prod
    container_name: api-gateway
    image: jakubpavlicek/api-gateway:0.0.1
    pull_policy: never
    ports:
      - "8100:8100"
    env_file:
      - .env
    environment:
      BP_HEALTH_CHECKER_ENABLED: false
      THC_PATH: /actuator/health
      THC_PORT: 8100
      JAVA_TOOL_OPTIONS: "-javaagent:/otel/opentelemetry-javaagent.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_EXPORTER_OTLP_COMPRESSION: gzip
      OTEL_SERVICE_NAME: api-gateway
      OTEL_METRICS_EXPORTER: otlp
      OTEL_TRACES_SAMPLER: parentbased_traceidratio
      OTEL_TRACES_SAMPLER_ARG: 1.0
    volumes:
      - ./otel/opentelemetry-javaagent.jar:/otel/opentelemetry-javaagent.jar
#    healthcheck:
#      test: [ "CMD", "/workspace/health-check" ]
#      start_period: 30s
#      timeout: 10s
#      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - is-stag-network

  student-service:
    profiles:
      - prod
    container_name: student-service
    image: jakubpavlicek/student-service:0.0.1
    pull_policy: never
    environment:
      JAVA_TOOL_OPTIONS: "-javaagent:/otel/opentelemetry-javaagent.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_EXPORTER_OTLP_COMPRESSION: gzip
      OTEL_SERVICE_NAME: student-service
      OTEL_METRICS_EXPORTER: otlp
      OTEL_TRACES_SAMPLER: parentbased_traceidratio
      OTEL_TRACES_SAMPLER_ARG: 1.0
    volumes:
      - ./otel/opentelemetry-javaagent.jar:/otel/opentelemetry-javaagent.jar
    ports:
      - "8030:8030"
      - "9030:9030"
    depends_on:
      api-gateway:
#        condition: service_healthy
        condition: service_started
      redis:
        condition: service_healthy
      otel:
        condition: service_started
    networks:
      - is-stag-network

  subject-service:
    profiles:
      - prod
    container_name: subject-service
    image: jakubpavlicek/subject-service:0.0.1
    pull_policy: never
    environment:
      JAVA_TOOL_OPTIONS: "-javaagent:/otel/opentelemetry-javaagent.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_EXPORTER_OTLP_COMPRESSION: gzip
      OTEL_SERVICE_NAME: subject-service
      OTEL_METRICS_EXPORTER: otlp
      OTEL_TRACES_SAMPLER: parentbased_traceidratio
      OTEL_TRACES_SAMPLER_ARG: 1.0
    volumes:
      - ./otel/opentelemetry-javaagent.jar:/otel/opentelemetry-javaagent.jar
    ports:
      - "8040:8040"
      - "9040:9040"
    depends_on:
      api-gateway:
#        condition: service_healthy
        condition: service_started
      redis:
        condition: service_healthy
      otel:
        condition: service_started
    networks:
      - is-stag-network

  user-service:
    profiles:
      - prod
    container_name: user-service
    image: jakubpavlicek/user-service:0.0.1
    pull_policy: never
    environment:
      JAVA_TOOL_OPTIONS: "-javaagent:/otel/opentelemetry-javaagent.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_EXPORTER_OTLP_COMPRESSION: gzip
      OTEL_SERVICE_NAME: user-service
      OTEL_METRICS_EXPORTER: otlp
      OTEL_TRACES_SAMPLER: parentbased_traceidratio
      OTEL_TRACES_SAMPLER_ARG: 1.0
    volumes:
      - ./otel/opentelemetry-javaagent.jar:/otel/opentelemetry-javaagent.jar
    ports:
      - "8020:8020"
      - "9020:9020"
    depends_on:
      api-gateway:
#        condition: service_healthy
        condition: service_started
      redis:
        condition: service_healthy
      otel:
        condition: service_started
    networks:
      - is-stag-network

  codelist-service:
    profiles:
      - prod
    container_name: codelist-service
    image: jakubpavlicek/codelist-service:0.0.1
    pull_policy: never
    environment:
      JAVA_TOOL_OPTIONS: "-javaagent:/otel/opentelemetry-javaagent.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_EXPORTER_OTLP_COMPRESSION: gzip
      OTEL_SERVICE_NAME: codelist-service
      OTEL_METRICS_EXPORTER: otlp
      OTEL_TRACES_SAMPLER: parentbased_traceidratio
      OTEL_TRACES_SAMPLER_ARG: 1.0
    volumes:
      - ./otel/opentelemetry-javaagent.jar:/otel/opentelemetry-javaagent.jar
    ports:
      - "8010:8010"
      - "9010:9010"
    depends_on:
      api-gateway:
#        condition: service_healthy
        condition: service_started
      redis:
        condition: service_healthy
      otel:
        condition: service_started
    networks:
      - is-stag-network

  # --- Observability ---

  otel:
    profiles:
      - dev
      - prod
    container_name: otel
    image: otel/opentelemetry-collector-contrib:latest
    command: [ --config=/etc/otel-config.yml ]
    volumes:
      - ./opentel-config.yaml:/etc/otel-config.yml
    ports:
      - "4318:4318"
      - "4317:4317"
      - "55679:55679"
    depends_on:
      loki:
        condition: service_started
      prometheus:
        condition: service_started
      tempo:
        condition: service_started
    networks:
      - is-stag-network
  loki:
    profiles:
      - dev
      - prod
    container_name: loki
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
      - ./data:/data
    ports:
      - "3100"
    networks:
      - is-stag-network
  grafana:
    profiles:
      - dev
      - prod
    container_name: grafana
    image: grafana/grafana:latest
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - ./grafana-datasources.yaml:/etc/grafana/provisioning/datasources/default.yml
      - ./grafana-datasources.yaml:/etc/grafana/provisioning/dashboards/default.yml
    ports:
      - "3000:3000"
    networks:
      - is-stag-network
  tempo:
    profiles:
      - dev
      - prod
    container_name: tempo
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo-config.yaml:/etc/tempo.yaml
      - ./data:/data
    ports:
      - "4317"  # otlp grpc
      - "4318"
    networks:
      - is-stag-network
  prometheus:
    profiles:
      - dev
      - prod
    container_name: prometheus
    image: prom/prometheus:latest
    command: [
      --config.file=/etc/prometheus/prometheus.yml,
      --web.enable-otlp-receiver,
      --web.enable-remote-write-receiver
    ]
    volumes:
      - ./prometheus-config.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9091:9090"
    networks:
      - is-stag-network

networks:
  is-stag-network:
    driver: bridge
