openapi: 3.0.3
info:
  title: User Service API
  description: |
    This API provides access to user-related functionalities in the IS/STAG system.
    It allows for the management and retrieval of user data.
  version: 1.0.0
  contact:
    name: STAG Support
    email: stag@service.zcu.cz
    url: https://is-stag.zcu.cz/zakaznici/Support.html

servers:
  - url: /api/v1
    description: User Service API through API Gateway

tags:
  - name: persons
    description: Operations for managing persons

paths:

  /persons/{personId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - persons
      summary: Get person
      description: Retrieve a person by their unique identifier.
      operationId: getPersonProfile
      parameters:
        - $ref: '#/components/parameters/AcceptLanguage'
        - $ref: '#/components/parameters/PersonId'
      responses:
        '200':
          description: Person details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /persons/{personId}/addresses:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - persons
      summary: Get person addresses
      description: Retrieve addresses associated with a person by their unique identifier.
      operationId: getPersonAddresses
      parameters:
        - $ref: '#/components/parameters/AcceptLanguage'
        - $ref: '#/components/parameters/PersonId'
      responses:
        '200':
          description: Person addresses retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressesResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /persons/{personId}/banking:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - persons
      summary: Get person banking information
      description: Retrieve banking information associated with a person by their unique identifier.
      operationId: getPersonBanking
      parameters:
        - $ref: '#/components/parameters/AcceptLanguage'
        - $ref: '#/components/parameters/PersonId'
      responses:
        '200':
          description: Person banking information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountsResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /persons/{personId}/education:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - persons
      summary: Get person education information
      description: Retrieve education information associated with a person by their unique identifier.
      operationId: getPersonEducation
      parameters:
        - $ref: '#/components/parameters/AcceptLanguage'
        - $ref: '#/components/parameters/PersonId'
      responses:
        '200':
          description: Person education information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EducationResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'

components:

  securitySchemes:

    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token issued by Keycloak

  parameters:

    AcceptLanguage:
      name: Accept-Language
      in: header
      description: Preferred language
      required: false
      schema:
        type: string
        enum:
          - cs
          - en
        default: cs

    PersonId:
      name: personId
      in: path
      required: true
      description: Unique identifier of the person.
      schema:
        $ref: '#/components/schemas/PersonId'

  schemas:

    PersonId:
      type: integer
      format: int32
      nullable: false
      title: Person ID
      description: The unique numeric identifier for a person.
      example: 221264

    StudentId:
      type: string
      title: Student ID
      nullable: false
      description: The unique alphanumeric identifier for a student.
      maxLength: 10
      example: K24B4302P

    PersonResponse:
      type: object
      title: Person Response
      description: Response containing person details.
      additionalProperties: false
      nullable: false
      required:
        - personId
        - studentIds
        - firstName
        - lastName
        - birthSurname
        - contact
        - titles
        - birthNumber
        - birthDate
        - birthPlace
        - citizenship
        - passportNumber
        - gender
        - maritalStatus
      properties:
        personId:
          $ref: '#/components/schemas/PersonId'
        studentIds:
          type: array
          nullable: false
          description: List of student ids associated with the person.
          items:
            $ref: '#/components/schemas/StudentId'
          example:
            - K24B4302P
        firstName:
          type: string
          nullable: false
          description: First name of the person.
          example: John
          maxLength: 100
        lastName:
          type: string
          nullable: false
          description: Last name of the person.
          example: Doe
          maxLength: 100
        birthSurname:
          type: string
          nullable: true
          description: Birth surename of the person.
          example: Smith
          maxLength: 100
        contact:
          $ref: '#/components/schemas/Contact'
        titles:
          $ref: '#/components/schemas/Titles'
        birthNumber:
          type: string
          nullable: false
          description: Birth number of the person.
          example: '7061030163'
          pattern: ^\d{10}$
          maxLength: 10
        birthDate:
          type: string
          format: date
          nullable: false
          description: Birth date of the person.
          example: '1990-01-01'
          pattern: ^\d{4}-\d{2}-\d{2}$
          maxLength: 10
        birthPlace:
          $ref: '#/components/schemas/BirthPlace'
        citizenship:
          $ref: '#/components/schemas/Citizenship'
        passportNumber:
          type: string
          nullable: true
          description: Passport number of the person.
          example: '16128791799'
          pattern: ^[A-Z0-9]{1,11}$
          maxLength: 11
        gender:
          type: string
          nullable: false
          description: Gender of the person.
          example: male
          maxLength: 240
        maritalStatus:
          type: string
          nullable: true
          description: Marital status of the person.
          example: single
          maxLength: 240

    Citizenship:
      type: object
      title: Citizenship
      description: Citizenship details of the person.
      additionalProperties: false
      nullable: false
      required:
        - country
        - qualifier
      properties:
        country:
          type: string
          nullable: false
          description: Country of citizenship.
          example: Czech Republic
          maxLength: 70
        qualifier:
          type: string
          nullable: true
          description: Citizenship qualifier of the person.
          example: Obƒçan
          maxLength: 240

    BirthPlace:
      type: object
      title: Birth Place
      description: Birth place of the person.
      additionalProperties: false
      nullable: false
      required:
        - city
        - country
      properties:
        city:
          type: string
          nullable: true
          description: Birth city of the person.
          example: Prague
          maxLength: 100
        country:
          type: string
          nullable: false
          description: Birth country of the person.
          example: Czech Republic
          maxLength: 70

    Titles:
      type: object
      title: Titles
      description: Titles of the person.
      additionalProperties: false
      nullable: false
      required:
        - prefix
        - suffix
      properties:
        prefix:
          $ref: '#/components/schemas/Title'
        suffix:
          $ref: '#/components/schemas/Title'

    Title:
      type: string
      nullable: true
      description: Title of the person.
      example: Ing.
      maxLength: 240

    Contact:
      type: object
      title: Contact
      description: Contact information of the person.
      additionalProperties: false
      nullable: false
      required:
        - email
        - phone
        - mobile
      properties:
        email:
          type: string
          format: email
          nullable: true
          description: Email address of the person.
          example: Martin95043186@xxx.cz
        phone:
          type: string
          nullable: true
          description: Phone number of the person.
          example: '+420123456789'
          pattern: ^\+?\d{1,20}$
          maxLength: 20
        mobile:
          type: string
          nullable: true
          description: Mobile number of the person.
          example: '+420987654321'
          pattern: ^\+?\d{1,30}$
          maxLength: 30

    Address:
      type: object
      title: Address
      description: Address details of the person.
      additionalProperties: false
      nullable: false
      required:
        - street
        - streetNumber
        - zipCode
        - municipality
        - municipalityPart
        - district
        - country
      properties:
        street:
          type: string
          nullable: true
          description: Street name of the address.
          example: P≈ô√≠chovice
          maxLength: 48
        streetNumber:
          type: string
          nullable: true
          description: Street number of the address.
          example: '97'
          maxLength: 10
        zipCode:
          type: string
          nullable: true
          description: Zip code of the address.
          example: '34901'
          pattern: ^\d{1,5}$
          maxLength: 5
        municipality:
          type: string
          nullable: true
          description: Municipality of the address.
          example: St≈ô√≠bro
          maxLength: 255
        municipalityPart:
          type: string
          nullable: true
          description: Part of the municipality.
          example: St≈ô√≠bro I
          maxLength: 255
        district:
          type: string
          nullable: true
          description: District of the address.
          example: Tachov
          maxLength: 100
        country:
          type: string
          nullable: true
          description: Country of the address.
          example: ƒåesk√° republika
          maxLength: 70

    ForeignAddress:
      type: object
      title: Foreign Address
      description: Address details of the person when they have a foreign residence.
      additionalProperties: false
      nullable: false
      required:
        - zipCode
        - municipality
        - district
        - postOffice
      properties:
        zipCode:
          type: string
          nullable: true
          description: Zip code of the foreign address.
          example: '1110'
          pattern: ^\d{1,10}$
          maxLength: 10
        municipality:
          type: string
          nullable: true
          description: Municipality of the foreign address.
          example: Mornaguia
          maxLength: 75
        district:
          type: string
          nullable: true
          description: District of the foreign address.
          example: manouba
          maxLength: 50
        postOffice:
          type: string
          nullable: true
          description: Post office of the foreign address.
          example: Mornaguia
          maxLength: 75

    AddressesResponse:
      type: object
      title: Person Addresses Response
      description: Response containing person addresses.
      additionalProperties: false
      nullable: false
      required:
        - permanentAddress
        - temporaryAddress
        - foreignPermanentAddress
        - foreignTemporaryAddress
      properties:
        permanentAddress:
          $ref: '#/components/schemas/Address'
        temporaryAddress:
          $ref: '#/components/schemas/Address'
        foreignPermanentAddress:
          $ref: '#/components/schemas/ForeignAddress'
        foreignTemporaryAddress:
          $ref: '#/components/schemas/ForeignAddress'

    BankAccount:
      type: object
      title: Bank Account
      description: Response containing bank account details.
      additionalProperties: false
      nullable: false
      required:
        - accountNumberPrefix
        - accountNumberSuffix
        - bankCode
        - bankName
        - iban
        - currency
        - holderName
        - holderAddress
      properties:
        accountNumberPrefix:
          type: string
          nullable: true
          description: Prefix of the bank account number.
          example: "295538"
          pattern: ^\d{1,6}$
          minLength: 1
          maxLength: 6
        accountNumberSuffix:
          type: string
          nullable: true
          description: Main part of the bank account number.
          example: "4167197191"
          pattern: ^\d{1,10}$
          minLength: 1
          maxLength: 10
        bankCode:
          type: string
          nullable: true
          description: Bank code of the bank where the account is held.
          example: "0100"
          pattern: ^\d{4}$
          maxLength: 4
        bankName:
          type: string
          nullable: true
          description: Name of the bank where the account is held.
          example: ƒåesk√° spo≈ôitelna, a.s.
          maxLength: 240
        iban:
          type: string
          nullable: true
          description: International Bank Account Number (IBAN).
          example: CZ6508000000002000145399
          maxLength: 30
        currency:
          type: string
          nullable: true
          description: Currency of the bank account.
          example: CZK
          pattern: ^[A-Z]{3}$
          maxLength: 3
        holderName:
          type: string
          nullable: true
          description: Name of the account holder.
          example: Jan Nov√°k
          maxLength: 255
        holderAddress:
          type: string
          nullable: true
          description: Address of the account holder.
          example: P≈ô√≠chovice 97, 34901 St≈ô√≠bro, ƒåesk√° republika
          maxLength: 255

    EuroBankAccount:
      type: object
      title: Euro Bank Account
      description: Bank account details for Euro transactions.
      additionalProperties: false
      nullable: false
      allOf:
        - $ref: '#/components/schemas/BankAccount'
        - $ref: '#/components/schemas/CountryAndSwiftCode'

    CountryAndSwiftCode:
      type: object
      title: Country And Swift Code
      description: Country and SWIFT code of the bank for Euro transactions.
      additionalProperties: false
      nullable: false
      required:
        - country
        - swiftCode
      properties:
        country:
          type: string
          nullable: true
          description: Country code of the Euro account.
          example: ƒåesk√° republika
          maxLength: 70
        swiftCode:
          type: string
          nullable: true
          description: SWIFT code of the bank for Euro transactions.
          example: KOMBCZPPXXX
          maxLength: 11

    BankAccountsResponse:
      type: object
      title: Bank Accounts Response
      description: Bank accounts of the person.
      additionalProperties: false
      nullable: false
      required:
        - account
        - euroAccount
      properties:
        account:
          $ref: '#/components/schemas/BankAccount'
        euroAccount:
          $ref: '#/components/schemas/EuroBankAccount'

    HighSchoolAddress:
      type: object
      title: High School Address
      description: High School address details.
      additionalProperties: false
      nullable: false
      required:
        - street
        - zipCode
        - municipality
        - district
        - country
      properties:
        street:
          type: string
          nullable: true
          description: Street name of the high school address.
          example: P≈ô√≠chovice
          maxLength: 48
        zipCode:
          type: string
          nullable: true
          description: Zip code of the high school address.
          example: '34901'
          pattern: ^\d{1,5}$
          maxLength: 5
        municipality:
          type: string
          nullable: true
          description: Municipality of the high school address.
          example: St≈ô√≠bro
          maxLength: 255
        district:
          type: string
          nullable: true
          description: District of the high school address.
          example: Tachov
          maxLength: 100
        country:
          type: string
          nullable: true
          description: Country of the high school address.
          example: ƒåesk√° republika
          maxLength: 70

    EducationResponse:
      type: object
      title: Education Response
      description: Education details of the person.
      additionalProperties: false
      nullable: false
      required:
        - highSchool
        - foreignHighSchool
      properties:
        highSchool:
          $ref: '#/components/schemas/HighSchool'
        foreignHighSchool:
          $ref: '#/components/schemas/ForeignHighSchool'

    HighSchool:
      type: object
      title: High School
      description: Details of the high school attended by the person.
      additionalProperties: false
      nullable: false
      required:
        - schoolName
        - fieldOfStudy
        - graduationDate
        - address
      properties:
        schoolName:
          type: string
          nullable: true
          description: Name of the high school.
          example: Gymn√°zium
          maxLength: 150
        fieldOfStudy:
          type: string
          nullable: true
          description: Field of study at the high school.
          example: V√Ωpoƒçetn√≠ technika a informatika
          maxLength: 240
        graduationDate:
          type: string
          format: date
          nullable: true
          description: Date of graduation from the educational institution.
          example: '2020-06-15'
        address:
          $ref: '#/components/schemas/HighSchoolAddress'

    ForeignHighSchool:
      type: object
      title: Foreign High School
      description: Details of the foreign high school attended by the person.
      additionalProperties: false
      nullable: false
      required:
        - schoolName
        - fieldOfStudy
        - location
      properties:
        schoolName:
          type: string
          nullable: true
          description: Name of the foreign high school.
          example: International School
          maxLength: 75
        fieldOfStudy:
          type: string
          nullable: true
          description: Field of study at the foreign high school.
          example: Computer Science
          maxLength: 255
        location:
          type: string
          nullable: true
          description: Location of the foreign high school.
          example: Paris
          maxLength: 75

    ProblemDetail:
      type: object
      title: Problem Detail
      description: A generic error.
      additionalProperties: false
      nullable: false
      required:
        - type
        - title
        - status
        - detail
        - instance
      properties:
        type:
          type: string
          description: A URI reference that identifies the problem type.
          example: http://localhost:8080/person-not-found
          pattern: ^((about:blank)|(https?://[^\s]+$))
          maxLength: 1000
        title:
          type: string
          description: A short, human-readable summary of the problem type.
          example: Domain Not Found
          pattern: ^[A-Za-z0-9\s\-.,!?:;'"]+$
          maxLength: 255
        status:
          type: number
          description: The HTTP status code.
          example: 404
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          example: 'Person with ID: 221264 not found'
          pattern: ^[A-Za-z0-9\s\-.,!?:;'"]+$
          maxLength: 1000
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem.
          example: /persons/221264
          pattern: ^(/[^\s]*)+$
          maxLength: 1000
        contextInfo:
          type: object
          additionalProperties: true
          maxProperties: 5
          description: A free-form based object that contains additional context about the error.
          example:
            personId: Must be greater than 0.

  responses:

    401Unauthorized:
      description: Access token is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
          example:
            type: http://localhost:8080/api/v1/unauthorized
            title: Unauthorized
            status: 401
            detail: Access token is missing or invalid
            instance: /api/v1/persons/221264

    403Forbidden:
      description: You do not have permission to access this resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
          example:
            type: http://localhost:8080/api/v1/forbidden
            title: Forbidden
            status: 403
            detail: You do not have permission to access this resource
            instance: /api/v1/persons/221264

    404NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
          example:
            type: http://localhost:8080/api/v1/person-not-found
            title: Person Not Found
            status: 404
            detail: 'Person with ID: 221264 not found'
            instance: /api/v1/persons/221264

    500InternalServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
          example:
            type: http://localhost:8080/api/v1/internal-server-error
            title: Internal server error
            status: 500
            detail: An unexpected error occurred
            instance: /api/v1/persons/221264
